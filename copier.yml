# Alkeme Frontend Template - Copier Configuration
# https://copier.readthedocs.io/en/stable/

_min_copier_version: "9.2"
_subdirectory: template
_templates_suffix: .jinja
_answers_file: .copier-answers.yml

_envops:
  # Use alternate delimiters for Jinja to avoid conflicts with frontend code
  block_start_string: "{%"
  block_end_string: "%}"
  variable_start_string: "{{"
  variable_end_string: "}}"
  comment_start_string: "{#"
  comment_end_string: "#}"

_jinja_extensions:
  - jinja2.ext.do

_skip_if_exists:
  - "*.md"
  - ".env"
  - "src/**/*.tsx"
  - "src/**/*.ts"

# ============================================================================
# PROJECT IDENTITY
# ============================================================================

project_name:
  type: str
  help: What is your frontend project name?
  default: "Alkeme Template Frontend"
  validator: >-
    {% if not project_name or project_name.strip() == '' %}
    Project name cannot be empty
    {% endif %}

package_name:
  type: str
  default: "{{ project_name | lower | replace(' ', '-') | replace('_', '-') }}"
  when: false

project_description:
  type: str
  default: "{{ project_name }} - A modern React application built with Vite, TypeScript, and Tailwind CSS"
  when: false

owner_org:
  type: str
  default: "Alkeme-Insurance"
  when: false

author_name:
  type: str
  default: "Alkeme Team"
  when: false

author_email:
  type: str
  default: "dev@alkeme.com"
  when: false

repository_url:
  type: str
  default: "https://github.com/Alkeme-Insurance/{{ package_name }}"
  when: false

# ============================================================================
# FEATURE FLAGS
# ============================================================================

use_azure_auth:
  type: bool
  default: true
  when: false

use_pwa:
  type: bool
  default: false
  when: false

use_analytics:
  type: bool
  default: true
  when: false

analytics_provider:
  type: str
  default: "clarity"
  when: false

use_cursor_rules:
  type: bool
  default: true
  when: false

cursor_rules_style:
  type: str
  default: "react-typescript"
  when: false

use_git_hooks:
  type: bool
  default: true
  when: false

git_hook_tool:
  type: str
  default: "pre-commit"
  when: false

# ============================================================================
# PROJECT STRUCTURE & SCAFFOLDING
# ============================================================================

scaffold_components:
  type: yaml
  multiselect: true
  choices:
    api:
      value: &api
        name: api
        description: API clients and data fetching
    auth:
      value: &auth
        name: auth
        description: Authentication (MSAL) components
    components:
      value: &components
        name: components
        description: Reusable React components
    pages:
      value: &pages
        name: pages
        description: Page-level components
    lib:
      value: &lib
        name: lib
        description: Utility functions and helpers
    types:
      value: &types
        name: types
        description: TypeScript type definitions
    hooks:
      value: &hooks
        name: hooks
        description: Custom React hooks
    stores:
      value: &stores
        name: stores
        description: State management stores
  default: [*api, *auth, *components, *pages, *lib, *types, *hooks]
  when: false

include_docker:
  type: bool
  default: true
  when: false

include_makefile:
  type: bool
  default: true
  when: false

include_setup_script:
  type: bool
  default: true
  when: false

# ============================================================================
# CI/CD CONFIGURATION
# ============================================================================

ci_github_actions:
  type: bool
  default: true
  when: false

ci_include_azure_deploy:
  type: bool
  default: true
  when: false

# ============================================================================
# AZURE CONFIGURATION
# ============================================================================

use_azure_deployment:
  type: bool
  default: true
  when: false

azure_region:
  type: str
  default: "eastus"
  when: false

azure_environment:
  type: str
  default: "dev"
  when: false

azure_subscription_id:
  type: str
  default: ""
  when: false

azure_resource_group:
  type: str
  default: "rg-{{ package_name }}-{{ azure_environment }}"
  when: false

azure_container_registry_name:
  type: str
  default: "acr{{ package_name.replace('-', '').replace('_', '') }}{{ azure_environment }}"
  when: false

use_azure_front_door:
  type: bool
  default: false
  when: false

use_azure_key_vault:
  type: bool
  default: false
  when: false

# ============================================================================
# AZURE AD (MSAL) CONFIGURATION
# ============================================================================

azure_tenant_id:
  type: str
  default: ""
  when: false

azure_client_id:
  type: str
  default: ""
  when: false

azure_api_scope:
  type: str
  default: "api://your-app-id/access_as_user"
  when: false

# ============================================================================
# DEVELOPMENT CONFIGURATION
# ============================================================================

dev_port:
  type: int
  default: 5173
  when: false

docker_port:
  type: int
  default: 3000
  when: false

api_base_url_dev:
  type: str
  default: "http://localhost:8000"
  when: false


# ============================================================================
# PYTHON CONFIGURATION
# ============================================================================

python_version:
  type: str
  default: "3.13"
  when: false

python_dependency_manager:
  type: str
  default: "uv"
  when: false



# ============================================================================
# POST-GENERATION TASKS
# ============================================================================

_tasks:
  # Initialize git repository
  - command: '[ ! -d .git ] && git init -q || true'
    when: true

  # Install dependencies
  - command: npm install

  # Setup git hooks for secret scanning
  - command: |
      {% if git_hook_tool == 'pre-commit' %}
      {% if python_dependency_manager == 'uv' %}
      uv tool install pre-commit && pre-commit install
      {% elif python_dependency_manager == 'poetry' %}
      poetry add --group dev pre-commit && poetry run pre-commit install
      {% elif python_dependency_manager == 'pipenv' %}
      pipenv install --dev pre-commit && pipenv run pre-commit install
      {% else %}
      pip install pre-commit && pre-commit install
      {% endif %}
      {% elif git_hook_tool == 'detect-secrets' %}
      {% if python_dependency_manager == 'uv' %}
      uv tool install detect-secrets && detect-secrets scan --baseline .secrets.baseline
      {% elif python_dependency_manager == 'poetry' %}
      poetry add --group dev detect-secrets && poetry run detect-secrets scan --baseline .secrets.baseline
      {% elif python_dependency_manager == 'pipenv' %}
      pipenv install --dev detect-secrets && pipenv run detect-secrets scan --baseline .secrets.baseline
      {% else %}
      pip install detect-secrets && detect-secrets scan --baseline .secrets.baseline
      {% endif %}
      {% else %}
      git config core.hooksPath .githooks
      {% endif %}
    when: "{{ use_git_hooks }}"

  # Create .env from env.example
  - command: '[ ! -f .env ] && cp env.example .env || true'
    when: true

  # Initial git commit
  - command: git add .
    when: true

  - command: 'SKIP=no-commit-to-branch git commit -m "chore: scaffold {{ package_name }} via Copier" || git commit --no-verify -m "chore: scaffold {{ package_name }} via Copier"'
    when: true

  # Success message
  - |
    echo ""
    echo "‚úÖ {{ project_name }} has been successfully created!"
    echo ""
    echo "üìÅ Project location: {{ _copier_conf.dst_path }}"
    echo ""
    echo "üöÄ Next steps:"
    echo ""
    echo "  1. cd {{ package_name }}"
    echo "  2. npm run dev       # Start development server"
    echo "  3. npm test          # Run tests"
    echo "  4. npm run docker:up # Run with Docker"
    {% if use_azure_deployment %}
    echo ""
    echo "‚òÅÔ∏è  Azure deployment:"
    echo "  - Review and update infra/main.bicepparam"
    echo "  - Run: cd infra && ./deploy.sh"
    {% endif %}
    {% if use_azure_auth and not azure_client_id %}
    echo ""
    echo "üîê Azure AD Configuration:"
    echo "  - Register your app in Azure AD"
    echo "  - Update APP_AZURE_CLIENT_ID and APP_AZURE_TENANT_ID in .env"
    {% endif %}
    {% if use_git_hooks %}
    echo ""
    echo "üîß Git Hooks ({{ git_hook_tool }}):"
    echo "  - Python {{ python_version }} with {{ python_dependency_manager }}"
    echo "  - Secret scanning enabled to prevent credential leaks"
    {% endif %}
    {% if use_cursor_rules %}
    echo ""
    echo "‚ú® AI Editor Support:"
    echo "  - .cursorrules file configured for {{ cursor_rules_style }}"
    echo "  - Enhanced AI assistance with project context"
    {% endif %}
    echo ""
    echo "üìñ Documentation: README.md"
    echo ""
    echo "üéØ Key Features:"
    echo "  ‚ö° Vite + React 18 + TypeScript"
    echo "  üé® Tailwind CSS + Shadcn/ui components"
    {% if include_docker %}
    echo "  üê≥ Docker development environment"
    {% endif %}
    {% if use_git_hooks %}
    echo "  üîß Pre-commit hooks with secret scanning"
    {% endif %}
    echo ""

# ============================================================================
# TEMPLATE METADATA
# ============================================================================

_metadata:
  template_name: "Alkeme Frontend Template"
  template_version: "1.0.0"
  template_description: "Production-ready React + TypeScript + Tailwind template with Docker and Azure deployment"
  template_url: "https://github.com/alkeme/alkeme-template-frontend"
  copier_version: "9.2.0"
  features:
    - "‚ö° Modern Frontend: React 18+ with Vite, TypeScript, and Tailwind CSS"
    - "üêç Modern Python Tooling: Support for Python 3.10-3.13"
    - "üì¶ uv Package Manager: Fast and reliable Python package management"
    - "üê≥ Docker Support: Complete Docker development environment"
    - "‚ú® AI Editor Support: .cursorrules and documentation for AI-powered development"
    - "üìù Type Safety: Full TypeScript support with strict type checking"
    - "üîç Code Quality: Pre-configured ESLint, Prettier, and Ruff for Python tools"
    - "üß™ Testing: Vitest setup with example tests"
    - "üîß Pre-commit Hooks: Automated code quality checks and secret scanning"
    - "üèóÔ∏è CI Ready: GitHub Actions workflows included"
    - "‚òÅÔ∏è Azure Deployment: Bicep infrastructure and Container Apps support"
    - "üîê Authentication: Azure AD (MSAL) integration ready"
    - "üé® Component Library: Shadcn/ui integration with Tailwind"

# ============================================================================
# TEMPLATE STRUCTURE DOCUMENTATION
# ============================================================================
#
# This template generates the following structure:
#
# üìÅ {{package_name}}/                          # Root project directory
# ‚îú‚îÄ‚îÄ üìÑ {{_copier_conf.answers_file}}.jinja    # Copier answers file
# ‚îú‚îÄ‚îÄ üìÑ .env.example                           # Environment variables template
# ‚îú‚îÄ‚îÄ üìÑ package.json.jinja                     # Package configuration
# ‚îú‚îÄ‚îÄ üìÑ tsconfig.json                          # TypeScript configuration
# ‚îú‚îÄ‚îÄ üìÑ vite.config.ts                         # Vite build configuration
# ‚îú‚îÄ‚îÄ üìÑ tailwind.config.js                     # Tailwind CSS configuration
# ‚îú‚îÄ‚îÄ üìÑ index.html                             # HTML entry point
# {% if include_docker %}
# ‚îú‚îÄ‚îÄ üìÑ Dockerfile                             # Docker build configuration
# ‚îú‚îÄ‚îÄ üìÑ docker-compose.yml                     # Multi-service orchestration
# ‚îú‚îÄ‚îÄ üìÑ nginx.conf                             # Nginx server configuration
# {% endif %}
# {% if include_makefile %}
# ‚îú‚îÄ‚îÄ üìÑ Makefile                               # Convenient Docker commands
# {% endif %}
# {% if include_setup_script %}
# ‚îú‚îÄ‚îÄ üìÑ setup-env.sh                           # Interactive setup script
# {% endif %}
# {% if use_git_hooks %}
# ‚îú‚îÄ‚îÄ üìÅ .githooks/                             # Custom git hooks
# ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ pre-commit                         # Secret scanning hook
# {% endif %}
# {% if ci_github_actions %}
# ‚îú‚îÄ‚îÄ üìÅ .github/
# ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ workflows/
# ‚îÇ       ‚îî‚îÄ‚îÄ üìÑ ci-cd.yml                      # GitHub Actions workflow
# {% endif %}
# {% if use_azure_deployment %}
# ‚îú‚îÄ‚îÄ üìÅ infra/                                 # Azure infrastructure
# ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ main.bicep                         # Bicep infrastructure code
# ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ main.bicepparam                    # Bicep parameters
# ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ deploy.sh                          # Deployment script
# {% endif %}
# ‚îú‚îÄ‚îÄ üìÅ public/                                # Static assets
# ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ favicon.ico
# ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ robots.txt
# ‚îî‚îÄ‚îÄ üìÅ src/                                   # Source code
#     ‚îú‚îÄ‚îÄ üìÑ main.tsx                           # Application entry point
#     ‚îú‚îÄ‚îÄ üìÑ App.tsx.jinja                      # Main app component
#     ‚îú‚îÄ‚îÄ üìÑ vite-env.d.ts                      # Vite type declarations
#     {% for component in scaffold_components %}
#     ‚îú‚îÄ‚îÄ üìÅ {{component.name}}/                # {{component.description}}
#     ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ .gitkeep                       # Ensures directory is tracked
#     {% endfor %}
#     ‚îî‚îÄ‚îÄ üìÅ styles/                            # Global styles
#         ‚îî‚îÄ‚îÄ üìÑ globals.css                    # Global CSS with Tailwind
#
# Files with .jinja extension are processed as Jinja templates.
# Use {{ variable }} for substitution and {% %} for logic.
# Variables available: all answers + _copier_conf, _copier_answers, _folder_name
#
# Reference: https://copier.readthedocs.io/en/stable/creating/

